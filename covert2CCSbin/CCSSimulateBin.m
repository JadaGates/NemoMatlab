% -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
%   This Program is written by

%            JingX
% input filepath, it's will convert
% data format from ADC format
% to CCS format for simulation,
% and rename it with prefix CCS
%
% also fit for .mat generated by
% spiltData.
% -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

clc;
clear all;
close all;

%%- - - Initializing Parameter - - -%%
FileFlag = 0;
ChannelNum = 4;
ClipDataLength = 2048;
SampleRate = 200e3;
DataClip.Start = 1;         % if DataClip.Start == 0 , real all the data
DataClip.End = 600;
DataClip.Coff = 1024;
fp = 'E:\AUV\Robosub2018\Dataontainer\0705basin\07052216.bin';

FormatFlag = 0;
if(contains(fp, 'bin'))
    FormatFlag = 1;
end

if FormatFlag == 1
    auvdat = fopen(fp,'rb');
    data = fread(auvdat, [ChannelNum, 1024 * 1400000], 'int16')';
    fclose(auvdat);
else
    data = importdata(fp);  % .mat generated by spiltData
end
if DataClip.Start ~= 0
    data_float = data(DataClip.Coff * DataClip.Start : DataClip.Coff * DataClip.End - 1, :);  % section of data
else
    data_float = data;
    DataClip.Start = 'a';
    DataClip.End = 'n';
end



figure
for chan = 1 : 4
    plot(data_float(:, chan) + chan * 1e4);
    hold on;
end
hold off;
title('AUV DataClip');
xlabel('Time')
figloc

figure
signal = data_float;
DataClipStart = 1;
DataClipEnd = length(data_float);
DataLength = DataClipEnd - DataClipStart;
DataField = data_float(DataClipStart : DataClipEnd , 4);
f = SampleRate * (0 :  DataLength) / DataLength;
FFTdat = fft(DataField);
plot(f , abs(FFTdat));
axis([0 f(round(length(f)/2)) 0 max(abs(FFTdat))]);
xlabel('Frenquency /Hz');title('AUV DataClip FFT');
figloc

%%- - - Genareta Storage Path - - -%%
if FileFlag == 1
    DCS = ['_S', num2str(DataClip.Start)];
    DCE = ['E', num2str(DataClip.End)];
    regExp = '(.+\\)(.*)(\..*$)';
    regReplace = ['$1CCS$2' , DCS, DCE, '.bin'];
    fw = regexprep(fp, regExp, regReplace)    %#ok
    
    %%- - - Copy Storage Path to Clipboard  - - -%%
    ClipPath = strrep(fw, '\', '\\');
    clipboard('copy', ClipPath);
    
    %%- - - Convert Data - - -%%
    dataLength = length(data_float);
    WData = zeros(2 * dataLength, 4);
    WData(1 : 2 : end, :) = data_float;
    
    cellNum = 2 * dataLength / ClipDataLength;
    cellStyle = ClipDataLength * ones(1, cellNum);
    Data_in_Cell = mat2cell(WData, cellStyle, ChannelNum);
    RESULT = cellfun(@(x) x(:)', Data_in_Cell, 'uniformOutput', false);
    Output = cat(2, RESULT{:});
    
    %     kronMatrix = kron(eye(ChannelNum, ChannelNum), [1 ; 0]);
    %     %- - - Insert a zeros row every one row - - -%%
    %     for col_i = 1 : floor(dataLength / ChannelNum)
    %         Colume = (1 : 4) + (col_i - 1) * 4;
    %         WData = [WData; kronMatrix * data_float(Colume, :)];
    %     end
    %     %- - - Reshape to vector  - - -%%
    %     Output =[];
    %     for col_i = 1 : length(WData) / ClipDataLength
    %         temp = WData((1 : ClipDataLength) + ClipDataLength * (col_i - 1), :);
    %         vectorTemp = reshape(temp, [], 1);
    %         Output = [Output; vectorTemp];
    %     end
    covertdat = fopen(fw, 'wb');
    fwrite(covertdat, Output, 'float');
    fclose(covertdat);
end
if FileFlag == 1
    load calorie.mat
    fs = 44100;
    sound(calorie, cfs);
end
